//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the softkinetic_camera package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __softkinetic_camera__SOFTKINETICCONFIG_H__
#define __softkinetic_camera__SOFTKINETICCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace softkinetic_camera
{
  class SoftkineticConfigStatics;

  class SoftkineticConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(SoftkineticConfig &config, const SoftkineticConfig &max, const SoftkineticConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const SoftkineticConfig &config1, const SoftkineticConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, SoftkineticConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const SoftkineticConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, SoftkineticConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const SoftkineticConfig &config) const = 0;
      virtual void getValue(const SoftkineticConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T SoftkineticConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (SoftkineticConfig::* field);

      virtual void clamp(SoftkineticConfig &config, const SoftkineticConfig &max, const SoftkineticConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const SoftkineticConfig &config1, const SoftkineticConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, SoftkineticConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const SoftkineticConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, SoftkineticConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const SoftkineticConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const SoftkineticConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, SoftkineticConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, SoftkineticConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<SoftkineticConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(SoftkineticConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("camera_link"==(*_i)->name){camera_link = boost::any_cast<std::string>(val);}
        if("confidence_threshold"==(*_i)->name){confidence_threshold = boost::any_cast<int>(val);}
        if("use_voxel_grid_filter"==(*_i)->name){use_voxel_grid_filter = boost::any_cast<bool>(val);}
        if("voxel_grid_size"==(*_i)->name){voxel_grid_size = boost::any_cast<double>(val);}
        if("use_radius_outlier_filter"==(*_i)->name){use_radius_outlier_filter = boost::any_cast<bool>(val);}
        if("search_radius"==(*_i)->name){search_radius = boost::any_cast<double>(val);}
        if("min_neighbours"==(*_i)->name){min_neighbours = boost::any_cast<int>(val);}
        if("use_passthrough_filter"==(*_i)->name){use_passthrough_filter = boost::any_cast<bool>(val);}
        if("limit_min"==(*_i)->name){limit_min = boost::any_cast<double>(val);}
        if("limit_max"==(*_i)->name){limit_max = boost::any_cast<double>(val);}
        if("use_frustum_culling_filter"==(*_i)->name){use_frustum_culling_filter = boost::any_cast<bool>(val);}
        if("hfov"==(*_i)->name){hfov = boost::any_cast<double>(val);}
        if("vfov"==(*_i)->name){vfov = boost::any_cast<double>(val);}
        if("near_plane"==(*_i)->name){near_plane = boost::any_cast<double>(val);}
        if("far_plane"==(*_i)->name){far_plane = boost::any_cast<double>(val);}
        if("use_serial"==(*_i)->name){use_serial = boost::any_cast<bool>(val);}
        if("serial"==(*_i)->name){serial = boost::any_cast<std::string>(val);}
        if("enable_depth"==(*_i)->name){enable_depth = boost::any_cast<bool>(val);}
        if("depth_mode"==(*_i)->name){depth_mode = boost::any_cast<std::string>(val);}
        if("depth_frame_format"==(*_i)->name){depth_frame_format = boost::any_cast<std::string>(val);}
        if("depth_frame_rate"==(*_i)->name){depth_frame_rate = boost::any_cast<int>(val);}
        if("enable_color"==(*_i)->name){enable_color = boost::any_cast<bool>(val);}
        if("color_compression"==(*_i)->name){color_compression = boost::any_cast<std::string>(val);}
        if("color_frame_format"==(*_i)->name){color_frame_format = boost::any_cast<std::string>(val);}
        if("color_frame_rate"==(*_i)->name){color_frame_rate = boost::any_cast<int>(val);}
      }
    }

    std::string camera_link;
int confidence_threshold;
bool use_voxel_grid_filter;
double voxel_grid_size;
bool use_radius_outlier_filter;
double search_radius;
int min_neighbours;
bool use_passthrough_filter;
double limit_min;
double limit_max;
bool use_frustum_culling_filter;
double hfov;
double vfov;
double near_plane;
double far_plane;
bool use_serial;
std::string serial;
bool enable_depth;
std::string depth_mode;
std::string depth_frame_format;
int depth_frame_rate;
bool enable_color;
std::string color_compression;
std::string color_frame_format;
int color_frame_rate;

    bool state;
    std::string name;

    
}groups;



//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string camera_link;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int confidence_threshold;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_voxel_grid_filter;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double voxel_grid_size;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_radius_outlier_filter;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double search_radius;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int min_neighbours;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_passthrough_filter;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double limit_min;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double limit_max;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_frustum_culling_filter;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double hfov;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double vfov;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double near_plane;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double far_plane;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_serial;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string serial;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool enable_depth;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string depth_mode;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string depth_frame_format;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int depth_frame_rate;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool enable_color;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string color_compression;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string color_frame_format;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_frame_rate;
//#line 228 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("SoftkineticConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const SoftkineticConfig &__max__ = __getMax__();
      const SoftkineticConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const SoftkineticConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const SoftkineticConfig &__getDefault__();
    static const SoftkineticConfig &__getMax__();
    static const SoftkineticConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const SoftkineticConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void SoftkineticConfig::ParamDescription<std::string>::clamp(SoftkineticConfig &config, const SoftkineticConfig &max, const SoftkineticConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class SoftkineticConfigStatics
  {
    friend class SoftkineticConfig;

    SoftkineticConfigStatics()
    {
SoftkineticConfig::GroupDescription<SoftkineticConfig::DEFAULT, SoftkineticConfig> Default("Default", "", 0, 0, true, &SoftkineticConfig::groups);
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.camera_link = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.camera_link = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.camera_link = "base_rgbd_camera_optical_frame";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<std::string>("camera_link", "str", 0, "Camera optical frame", "", &SoftkineticConfig::camera_link)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<std::string>("camera_link", "str", 0, "Camera optical frame", "", &SoftkineticConfig::camera_link)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.confidence_threshold = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.confidence_threshold = 2000;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.confidence_threshold = 200;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<int>("confidence_threshold", "int", 0, "Confidence threshold", "", &SoftkineticConfig::confidence_threshold)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<int>("confidence_threshold", "int", 0, "Confidence threshold", "", &SoftkineticConfig::confidence_threshold)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_voxel_grid_filter = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_voxel_grid_filter = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_voxel_grid_filter = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("use_voxel_grid_filter", "bool", 0, "Enable downsampling (voxel grid) filter", "", &SoftkineticConfig::use_voxel_grid_filter)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("use_voxel_grid_filter", "bool", 0, "Enable downsampling (voxel grid) filter", "", &SoftkineticConfig::use_voxel_grid_filter)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.voxel_grid_size = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.voxel_grid_size = 0.1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.voxel_grid_size = 0.01;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("voxel_grid_size", "double", 0, "Voxel grid size", "", &SoftkineticConfig::voxel_grid_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("voxel_grid_size", "double", 0, "Voxel grid size", "", &SoftkineticConfig::voxel_grid_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_radius_outlier_filter = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_radius_outlier_filter = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_radius_outlier_filter = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("use_radius_outlier_filter", "bool", 0, "Enable radius outlier removal filter", "", &SoftkineticConfig::use_radius_outlier_filter)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("use_radius_outlier_filter", "bool", 0, "Enable radius outlier removal filter", "", &SoftkineticConfig::use_radius_outlier_filter)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.search_radius = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.search_radius = 0.1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.search_radius = 0.05;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("search_radius", "double", 0, "Search radius", "", &SoftkineticConfig::search_radius)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("search_radius", "double", 0, "Search radius", "", &SoftkineticConfig::search_radius)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_neighbours = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_neighbours = 500;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_neighbours = 50;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<int>("min_neighbours", "int", 0, "Minimum number of neightbours within the search radius", "", &SoftkineticConfig::min_neighbours)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<int>("min_neighbours", "int", 0, "Minimum number of neightbours within the search radius", "", &SoftkineticConfig::min_neighbours)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_passthrough_filter = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_passthrough_filter = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_passthrough_filter = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("use_passthrough_filter", "bool", 0, "Enable passthrough filter", "", &SoftkineticConfig::use_passthrough_filter)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("use_passthrough_filter", "bool", 0, "Enable passthrough filter", "", &SoftkineticConfig::use_passthrough_filter)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.limit_min = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.limit_min = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.limit_min = 0.01;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("limit_min", "double", 0, "Limit minimum value", "", &SoftkineticConfig::limit_min)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("limit_min", "double", 0, "Limit minimum value", "", &SoftkineticConfig::limit_min)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.limit_max = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.limit_max = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.limit_max = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("limit_max", "double", 0, "Limit maximum value", "", &SoftkineticConfig::limit_max)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("limit_max", "double", 0, "Limit maximum value", "", &SoftkineticConfig::limit_max)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_frustum_culling_filter = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_frustum_culling_filter = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_frustum_culling_filter = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("use_frustum_culling_filter", "bool", 0, "Enable frustum culling filter", "", &SoftkineticConfig::use_frustum_culling_filter)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("use_frustum_culling_filter", "bool", 0, "Enable frustum culling filter", "", &SoftkineticConfig::use_frustum_culling_filter)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.hfov = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.hfov = 180.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.hfov = 90.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("hfov", "double", 0, "Horizontal FOV (degrees)", "", &SoftkineticConfig::hfov)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("hfov", "double", 0, "Horizontal FOV (degrees)", "", &SoftkineticConfig::hfov)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.vfov = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.vfov = 180.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.vfov = 90.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("vfov", "double", 0, "Vertical FOV (degrees)", "", &SoftkineticConfig::vfov)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("vfov", "double", 0, "Vertical FOV (degrees)", "", &SoftkineticConfig::vfov)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.near_plane = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.near_plane = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.near_plane = 0.01;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("near_plane", "double", 0, "Near plane", "", &SoftkineticConfig::near_plane)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("near_plane", "double", 0, "Near plane", "", &SoftkineticConfig::near_plane)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.far_plane = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.far_plane = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.far_plane = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("far_plane", "double", 0, "Far plane", "", &SoftkineticConfig::far_plane)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<double>("far_plane", "double", 0, "Far plane", "", &SoftkineticConfig::far_plane)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_serial = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_serial = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_serial = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("use_serial", "bool", 0, "Enable serial number identification", "", &SoftkineticConfig::use_serial)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("use_serial", "bool", 0, "Enable serial number identification", "", &SoftkineticConfig::use_serial)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.serial = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.serial = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.serial = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<std::string>("serial", "str", 0, "Camera serial number", "", &SoftkineticConfig::serial)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<std::string>("serial", "str", 0, "Camera serial number", "", &SoftkineticConfig::serial)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.enable_depth = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.enable_depth = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.enable_depth = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("enable_depth", "bool", 0, "Enable depth", "", &SoftkineticConfig::enable_depth)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("enable_depth", "bool", 0, "Enable depth", "", &SoftkineticConfig::enable_depth)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.depth_mode = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.depth_mode = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.depth_mode = "close";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<std::string>("depth_mode", "str", 0, "Depth mode", "{'enum_description': 'Depth modes', 'enum': [{'srcline': 40, 'description': 'Close mode', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'close', 'ctype': 'std::string', 'type': 'str', 'name': 'close'}, {'srcline': 41, 'description': 'Long mode', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'long', 'ctype': 'std::string', 'type': 'str', 'name': 'long'}]}", &SoftkineticConfig::depth_mode)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<std::string>("depth_mode", "str", 0, "Depth mode", "{'enum_description': 'Depth modes', 'enum': [{'srcline': 40, 'description': 'Close mode', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'close', 'ctype': 'std::string', 'type': 'str', 'name': 'close'}, {'srcline': 41, 'description': 'Long mode', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'long', 'ctype': 'std::string', 'type': 'str', 'name': 'long'}]}", &SoftkineticConfig::depth_mode)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.depth_frame_format = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.depth_frame_format = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.depth_frame_format = "QQVGA";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<std::string>("depth_frame_format", "str", 0, "Depth frame format", "{'enum_description': 'Depth frame formats', 'enum': [{'srcline': 44, 'description': 'QQVGA', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'QQVGA', 'ctype': 'std::string', 'type': 'str', 'name': 'QQVGA'}, {'srcline': 45, 'description': 'QVGA', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'QVGA', 'ctype': 'std::string', 'type': 'str', 'name': 'QVGA'}, {'srcline': 46, 'description': 'VGA', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'VGA', 'ctype': 'std::string', 'type': 'str', 'name': 'VGA'}]}", &SoftkineticConfig::depth_frame_format)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<std::string>("depth_frame_format", "str", 0, "Depth frame format", "{'enum_description': 'Depth frame formats', 'enum': [{'srcline': 44, 'description': 'QQVGA', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'QQVGA', 'ctype': 'std::string', 'type': 'str', 'name': 'QQVGA'}, {'srcline': 45, 'description': 'QVGA', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'QVGA', 'ctype': 'std::string', 'type': 'str', 'name': 'QVGA'}, {'srcline': 46, 'description': 'VGA', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'VGA', 'ctype': 'std::string', 'type': 'str', 'name': 'VGA'}]}", &SoftkineticConfig::depth_frame_format)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.depth_frame_rate = 25;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.depth_frame_rate = 60;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.depth_frame_rate = 30;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<int>("depth_frame_rate", "int", 0, "Depth frame rate", "{'enum_description': 'Depth frame rates', 'enum': [{'srcline': 51, 'description': '25Hz', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const int', 'value': 25, 'ctype': 'int', 'type': 'int', 'name': '25'}, {'srcline': 52, 'description': '30Hz', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const int', 'value': 30, 'ctype': 'int', 'type': 'int', 'name': '30'}, {'srcline': 53, 'description': '50Hz', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const int', 'value': 50, 'ctype': 'int', 'type': 'int', 'name': '50'}, {'srcline': 54, 'description': '60Hz', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const int', 'value': 60, 'ctype': 'int', 'type': 'int', 'name': '60'}]}", &SoftkineticConfig::depth_frame_rate)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<int>("depth_frame_rate", "int", 0, "Depth frame rate", "{'enum_description': 'Depth frame rates', 'enum': [{'srcline': 51, 'description': '25Hz', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const int', 'value': 25, 'ctype': 'int', 'type': 'int', 'name': '25'}, {'srcline': 52, 'description': '30Hz', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const int', 'value': 30, 'ctype': 'int', 'type': 'int', 'name': '30'}, {'srcline': 53, 'description': '50Hz', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const int', 'value': 50, 'ctype': 'int', 'type': 'int', 'name': '50'}, {'srcline': 54, 'description': '60Hz', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const int', 'value': 60, 'ctype': 'int', 'type': 'int', 'name': '60'}]}", &SoftkineticConfig::depth_frame_rate)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.enable_color = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.enable_color = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.enable_color = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("enable_color", "bool", 0, "Enable color", "", &SoftkineticConfig::enable_color)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<bool>("enable_color", "bool", 0, "Enable color", "", &SoftkineticConfig::enable_color)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_compression = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_compression = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_compression = "MJPEG";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<std::string>("color_compression", "str", 0, "Color compression", "{'enum_description': 'Color compressions', 'enum': [{'srcline': 57, 'description': 'YUY2', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'YUY2', 'ctype': 'std::string', 'type': 'str', 'name': 'YUY2'}, {'srcline': 58, 'description': 'MJPEG', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'MJPEG', 'ctype': 'std::string', 'type': 'str', 'name': 'MJPEG'}]}", &SoftkineticConfig::color_compression)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<std::string>("color_compression", "str", 0, "Color compression", "{'enum_description': 'Color compressions', 'enum': [{'srcline': 57, 'description': 'YUY2', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'YUY2', 'ctype': 'std::string', 'type': 'str', 'name': 'YUY2'}, {'srcline': 58, 'description': 'MJPEG', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'MJPEG', 'ctype': 'std::string', 'type': 'str', 'name': 'MJPEG'}]}", &SoftkineticConfig::color_compression)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_frame_format = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_frame_format = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_frame_format = "VGA";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<std::string>("color_frame_format", "str", 0, "Color frame format", "{'enum_description': 'Color frame formats', 'enum': [{'srcline': 44, 'description': 'QQVGA', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'QQVGA', 'ctype': 'std::string', 'type': 'str', 'name': 'QQVGA'}, {'srcline': 45, 'description': 'QVGA', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'QVGA', 'ctype': 'std::string', 'type': 'str', 'name': 'QVGA'}, {'srcline': 46, 'description': 'VGA', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'VGA', 'ctype': 'std::string', 'type': 'str', 'name': 'VGA'}, {'srcline': 47, 'description': 'NHD', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'NHD', 'ctype': 'std::string', 'type': 'str', 'name': 'NHD'}, {'srcline': 48, 'description': 'WXGA_H', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'WXGA_H', 'ctype': 'std::string', 'type': 'str', 'name': 'WXGA_H'}]}", &SoftkineticConfig::color_frame_format)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<std::string>("color_frame_format", "str", 0, "Color frame format", "{'enum_description': 'Color frame formats', 'enum': [{'srcline': 44, 'description': 'QQVGA', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'QQVGA', 'ctype': 'std::string', 'type': 'str', 'name': 'QQVGA'}, {'srcline': 45, 'description': 'QVGA', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'QVGA', 'ctype': 'std::string', 'type': 'str', 'name': 'QVGA'}, {'srcline': 46, 'description': 'VGA', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'VGA', 'ctype': 'std::string', 'type': 'str', 'name': 'VGA'}, {'srcline': 47, 'description': 'NHD', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'NHD', 'ctype': 'std::string', 'type': 'str', 'name': 'NHD'}, {'srcline': 48, 'description': 'WXGA_H', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const char * const', 'value': 'WXGA_H', 'ctype': 'std::string', 'type': 'str', 'name': 'WXGA_H'}]}", &SoftkineticConfig::color_frame_format)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_frame_rate = 30;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_frame_rate = 30;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_frame_rate = 30;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<int>("color_frame_rate", "int", 0, "Color frame rate", "{'enum_description': 'Color frame rates', 'enum': [{'srcline': 52, 'description': '30Hz', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const int', 'value': 30, 'ctype': 'int', 'type': 'int', 'name': '30'}]}", &SoftkineticConfig::color_frame_rate)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SoftkineticConfig::AbstractParamDescriptionConstPtr(new SoftkineticConfig::ParamDescription<int>("color_frame_rate", "int", 0, "Color frame rate", "{'enum_description': 'Color frame rates', 'enum': [{'srcline': 52, 'description': '30Hz', 'srcfile': '/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg', 'cconsttype': 'const int', 'value': 30, 'ctype': 'int', 'type': 'int', 'name': '30'}]}", &SoftkineticConfig::color_frame_rate)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(SoftkineticConfig::AbstractGroupDescriptionConstPtr(new SoftkineticConfig::GroupDescription<SoftkineticConfig::DEFAULT, SoftkineticConfig>(Default)));
//#line 366 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<SoftkineticConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<SoftkineticConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<SoftkineticConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    SoftkineticConfig __max__;
    SoftkineticConfig __min__;
    SoftkineticConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const SoftkineticConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static SoftkineticConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &SoftkineticConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const SoftkineticConfig &SoftkineticConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const SoftkineticConfig &SoftkineticConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const SoftkineticConfig &SoftkineticConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<SoftkineticConfig::AbstractParamDescriptionConstPtr> &SoftkineticConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<SoftkineticConfig::AbstractGroupDescriptionConstPtr> &SoftkineticConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const SoftkineticConfigStatics *SoftkineticConfig::__get_statics__()
  {
    const static SoftkineticConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = SoftkineticConfigStatics::get_instance();

    return statics;
  }

//#line 40 "/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg"
      const char * const Softkinetic_close = "close";
//#line 41 "/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg"
      const char * const Softkinetic_long = "long";
//#line 44 "/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg"
      const char * const Softkinetic_QQVGA = "QQVGA";
//#line 45 "/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg"
      const char * const Softkinetic_QVGA = "QVGA";
//#line 46 "/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg"
      const char * const Softkinetic_VGA = "VGA";
//#line 47 "/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg"
      const char * const Softkinetic_NHD = "NHD";
//#line 48 "/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg"
      const char * const Softkinetic_WXGA_H = "WXGA_H";
//#line 51 "/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg"
      const int Softkinetic_25 = 25;
//#line 52 "/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg"
      const int Softkinetic_30 = 30;
//#line 53 "/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg"
      const int Softkinetic_50 = 50;
//#line 54 "/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg"
      const int Softkinetic_60 = 60;
//#line 57 "/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg"
      const char * const Softkinetic_YUY2 = "YUY2";
//#line 58 "/home/zeged/catkin_ws/src/armadillo2/armadillo2_utils/softkinetic/softkinetic_camera/cfg/Softkinetic.cfg"
      const char * const Softkinetic_MJPEG = "MJPEG";
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __SOFTKINETICRECONFIGURATOR_H__
